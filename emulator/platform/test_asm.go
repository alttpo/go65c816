package platform
/*

import (
	_ "fmt"

)

type memoryData struct {
	addr24 uint32
	bytes  []byte
}
*/

/*
type cpuRegisters struct {
	PC	uint16
	SP	uint16

	RA	uint16
	RX	uint16
	RY	uint16

	RDBR	uint8
	RD	uint16
	RK	uint8

        N         byte   // Negative flag
        V         byte   // oVerflow flag
        M         byte   // accumulator and Memory width flag
        X         byte   // indeX register width flag
        D         byte   // Decimal mode flag
        I         byte   // Interrupt disable flag
        Z         byte   // Zero flag
        C         byte   // Carry flag

        B         byte   // Break flag
        E         byte   // Emulation mode flag

}
*/
/*
func loadCode(p *Platform, program []memoryData) {

	//p.CPU.Bus.Clear()

	for _, segment := range program {
		for i := range segment.bytes {
			p.CPU.Bus.EaWrite(segment.addr24 + uint32(i), segment.bytes[i])
		}
	}
}


func test_pei(p *Platform) {
	program := []memoryData{
		{0x000000, []byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		}},
		{0x001000, []byte{
			0x04, 0x20, 0x05, 0x30, 0x01, 0x35, 0x36, 0x0e,
			0x03, 0x12, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		}},
		{0x001100, []byte{
			0xF4, 0x34, 0x12,	// PEA #$1234
			0xD4, 0x12,		// PEI $12
			0x62, 0x04, 0x00,	// PER
			0xa5, 0x0a,		// LDA $0a 
			0x85, 0xe1, 0x00,
			0xea,

		}},
	}

	loadCode(p, program)
	p.CPU.PC = 0x1100
	//p.CPU.rD = 0xFF00
	//p.CPU.SP = 0xFF10
	//p.CPU.rDBR = 0x00
}


func test_adc(p *Platform) {
	program := []memoryData{
		{0x000000, []byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		}},
		{0x001000, []byte{
			0x04, 0x20, 0x05, 0x30, 0x01, 0x35, 0x36, 0x0e,
			0x03, 0x12, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		}},
		{0x001100, []byte{
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xa9, 0x96, 0x60,	// LDA $6096
			0x69, 0x00, 0x00,
			0xEA,

		}},
		{0x001200, []byte{
			0x60,			// RTS
			0xEA,
			0x60,			// RTS
			0xEA,

		}},
		{0x012000, []byte{
			0x6B,			// RTL
			0x00,
		}},
	}

	loadCode(p, program)
	p.CPU.PC = 0x1100
	//p.CPU.RD = 0xFF00
	//p.CPU.SP = 0xFF10
	//p.CPU.RDBR = 0x00
}





func test_io(p *Platform) {
	program := []memoryData{
		{0x000000, []byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		}},
		{0x001000, []byte{
			0x04, 0x20, 0x05, 0x30, 0x01, 0x35, 0x36, 0x0e,
			0x03, 0x12, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		}},
		{0x001100, []byte{
			0xE2, 0x30,		// SEP #$10	; short A/X
			0xa9, 0x41,		// LDA #'A'
			0x8D, 0x77, 0xDF,	// STA $DF77
			0x8D, 0x77, 0xDF,	// STA $DF77
			0x8D, 0x77, 0xDF,	// STA $DF77
			0x8D, 0x77, 0xDF,	// STA $DF77
			0xEA,

		}},
		{0x001200, []byte{
			0x60,			// RTS
			0xEA,
			0x60,			// RTS
			0xEA,

		}},
		{0x012000, []byte{
			0x6B,			// RTL
			0x00,
		}},
	}

	loadCode(p, program)
	p.CPU.PC = 0x1100
	//p.CPU.RD = 0xFF00
	//p.CPU.SP = 0xFF10
	//p.CPU.RDBR = 0x00
}


func test_jsr(p *Platform) {
	program := []memoryData{
		{0x000000, []byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		}},
		{0x001000, []byte{
			0x04, 0x20, 0x05, 0x30, 0x01, 0x35, 0x36, 0x0e,
			0x03, 0x12, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		}},
		{0x001100, []byte{
			0x22, 0x00, 0x20, 0x01,	// JSL $01:2000
			0xEA,
			0x20, 0x00, 0x12,	// JSR $1200
			0xEA,
			0xE2, 0x10,		// SEP #$10	; short X
			0xA2, 0x08,		// LDX #$08
			0x7c, 0x00, 0x10,	// JSR ($1000, X)
			0xEA,

		}},
		{0x001200, []byte{
			0x60,			// RTS
			0xEA,
			0x60,			// RTS
			0xEA,

		}},
		{0x012000, []byte{
			0x6B,			// RTL
			0x00,
		}},
	}

	loadCode(p, program)
	p.CPU.PC = 0x1100
	//p.CPU.RD = 0xFF00
	//p.CPU.SP = 0xFF10
	//p.CPU.RDBR = 0x00
}


func test_jump(p *Platform) {
	program := []memoryData{
		{0x000000, []byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		}},
		{0x001000, []byte{
			0x04, 0x20, 0x05, 0x30, 0x01, 0x35, 0x36, 0x0e,
			0x08, 0x10, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		}},
		{0x001100, []byte{
			0x4c, 0x00, 0x12,	// JMP $1200   [1]
			0x00,
			0xdc, 0x02, 0x10,        // JMP [$1002] [6 - to $013005]
			0x00,

		}},
		{0x001200, []byte{
			0x5c, 0x00, 0x20, 0x01,	// JMP $012000 [2]
		}},
		{0x012000, []byte{
			0x6c, 0x00, 0x10,	// JMP ($1000) [3 - to $01:2004]
			0x00,
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA2, 0x0D, 0x00,	// LDX #$000D
			0x7c, 0x00, 0x20,	// JMP ($1000, x) [4 - to $01108]
			0x00,
			0x00, 0x30,              // pointer data for 4
		}},
		{0x013000, []byte{
			0x5c, 0x04, 0x11, 0x00,	// JMP $001104 [5]
			0x00,
			0xea,			// final
		}},
	}

	loadCode(p, program)
	p.CPU.PC = 0x1100
	//p.CPU.RD = 0xFF00
	//p.CPU.SP = 0xFF10
	//p.CPU.RDBR = 0x00
}



func test_rol(p *Platform) {
	program := []memoryData{
		{0x000000, []byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		}},
		{0x001000, []byte{
			0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x0e,
			0x08, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		}},
		{0x001100, []byte{
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA9, 0x00, 0x00,	// LDA #$0000
			0x38,			// SEC
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0xea,
			0xE2, 0x20,		// SEP #$20	; short A
			0xA9, 0x00, 		// LDA #$00
			0x38,			// SEC
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL
			0x2a,			// ROL

			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA9, 0x00, 0x00,	// LDA #$0000
			0x85, 0x00,		// STA $00
			0x38,			// SEC
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0xea,
			0xE2, 0x20,		// SEP #$20	; short A
			0xA9, 0x00, 		// LDA #$00
			0x85, 0x00,		// STA $00
			0x38,			// SEC
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00
			0x26, 0x00,		// ROL $00

		}},
	}

	loadCode(p, program)
	p.CPU.PC = 0x1100
	//p.CPU.RD = 0xFF00
	//p.CPU.SP = 0xFF10
	//p.CPU.RDBR = 0x00
}






func test_stz(p *Platform) {
	program := []memoryData{
		{0x000000, []byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		}},
		{0x00FFFF, []byte{
			0x00,
		}},
		{0x001000, []byte{
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		}},
		{0x002000, []byte{
			0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
			0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		}},
		{0x010000, []byte{
			0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x0e,
			0x08, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		}},
		{0x001100, []byte{
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA9, 0xFF, 0xFF,	// LDA #$FFFF
			0xAF, 0x08, 0x00, 0x01, // LDA $010008
			0x64, 0x02,             // STZ $02
			0xE2, 0x20,		// SEP #$20	; short A
			0x64, 0x05,             // STZ $02
			0xA2, 0x0A, 0x00,	// LDX #$000a
			0x74, 0X00,             // STZ $00, X
			0x9E, 0xFE, 0xFF,       // STZ $FFFE, X
			0xAF, 0x08, 0x00, 0x01, // LDA $010008
		}},
	}

	loadCode(p, program)
	p.CPU.PC = 0x1100
	//p.CPU.RD = 0xFF00
	//p.CPU.SP = 0xFF10
	//p.CPU.RDBR = 0x00
}





func test_stack_relative(p *Platform) {
	program := []memoryData{
		{0x000000, []byte{
			0x02, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x03, 
			0x02, 0x00, 0xF0, 0xFF, 0x0c, 0x0d, 0x0e, 0x0f,
		}},
		{0x00FFFF, []byte{
			0x00,
		}},
		{0x001000, []byte{
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
			0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		}},
		{0x002000, []byte{
			0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
			0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		}},
		{0x010000, []byte{
			0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x0e, 
			0x00, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		}},
		{0x001100, []byte{
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA3, 0xFA,             // LDA $FA, S
			0xA0, 0x18, 0x00,	// LDY #$0050
			0xA2, 0x0A, 0x00,	// LDX #$000a
			0xB3, 0xFA,             // LDA ($FA, S), Y
		}},
	}

	loadCode(p, program)
	p.CPU.PC = 0x1100
	p.CPU.RD = 0xFF00
	p.CPU.SP = 0xFF10
	p.CPU.RDBR = 0x00
}


func test_lda(p *Platform) {
	program := []memoryData{
		{0x000000, []byte{
			0x02, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x03, 
			0x02, 0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		}},
		{0x00FFFF, []byte{
			0x00,
		}},
		{0x001000, []byte{
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
			0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		}},
		{0x002000, []byte{
			0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
			0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		}},
		{0x010000, []byte{
			0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x0e, 
			0x00, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		}},
		{0x001100, []byte{
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA3, 0xFA,             // LDA $FA, S
			0xA0, 0x08, 0x00,	// LDY #$0008
			0xA2, 0x0A, 0x00,	// LDX #$000a
			0xA1, 0xFE,             // LDA ($FE, X)
			0xA7, 0xFF,		// LDA [FF]
			0xB7, 0xFF,		// LDA [FF], Y
			0xB2, 0xFF,		// LDA (FF)
			0xB1, 0xFF,		// LDA (FF), Y
			0xEA,
			0xA9, 0x33, 0x88,	// LDA #$8833
			0xA5, 0x02,		// LDA $02
			0xAD, 0x02, 0x20,	// LDA $2002
			0xB5, 0x02,		// LDA $02, X
			0xB9, 0x02, 0x20,	// LDA $2002, Y
			0xBD, 0x02, 0x20,	// LDA $2002, X
			0xBF, 0x00, 0x00, 0x01, // LDA $100000, X
			0xAF, 0x00, 0x00, 0x01, // LDA $100000

			0xE2, 0x20,		// SEP #$20	;  short A 
			0xA9, 0x88,		// LDA #$88
			0xA5, 0x02,		// LDA $02
			0xAD, 0x02, 0x20,	// LDA $2002
			0xA0, 0x08, 0x00,	// LDY #$0008
			0xA2, 0x09, 0x00,	// LDX #$0009
			0xB5, 0x02,		// LDA $02, X
			0xB9, 0x02, 0x20,	// LDA $2002, Y
			0xBD, 0x02, 0x20,	// LDA $2002, X
			0xBF, 0x00, 0x00, 0x01, // LDA $100000, X
			0xAF, 0x00, 0x00, 0x01, // LDA $100000
		}},
	}

	loadCode(p, program)
	p.CPU.PC = 0x1100
	p.CPU.RD = 0xFF00
	p.CPU.SP = 0xFF10
	p.CPU.RDBR = 0x01
}

func test_ldx(p *Platform) {
	program := []memoryData{
		{0x000000, []byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		}},
		{0x001000, []byte{
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
			0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		}},
		{0x002000, []byte{
			0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
			0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		}},
		{0x010000, []byte{
			0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
			0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		}},
		{0x001100, []byte{
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA2, 0x33, 0x88,	// LDX #$8833
			0xA6, 0x02,		// LDX $02
			0xAE, 0x02, 0x20,	// LDX $2002
			0xA0, 0x08, 0x00,	// LDY #$0008
			0xB6, 0x02,		// LDX $02, X
			0xBE, 0x02, 0x20,	// LDX $2002, X
			0xE2, 0x10,		// SEP #$10	; long A, short X
			0xA2, 0x33,		// LDX #$8833
			0xA6, 0x02,		// LDX $02
			0xAE, 0x02, 0x20,	// LDX $2002
			0xA0, 0x08,		// LDY #$08
			0xB6, 0x02,		// LDX $02, X
			0xBE, 0x02, 0x20,	// LDX $2002, X
			0xEA,			// NOP
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA0, 0xFF, 0xFF,	// LDY #$FFFF
			0xB6, 0x02,		// LDX $01, X   - expect 1
			0xBE, 0x00, 0x00,	// LDX $0001, X
		}},
	}

	loadCode(p, program)
	p.CPU.PC = 0x1100
}

func test_ldy(p *Platform) {
	program := []memoryData{
		{0x000000, []byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		}},
		{0x001000, []byte{
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
			0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		}},
		{0x002000, []byte{
			0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
			0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		}},
		{0x010000, []byte{
			0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
			0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		}},
		{0x001100, []byte{
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA0, 0x33, 0x88,	// LDY #$8833
			0xA4, 0x02,		// LDY $02
			0xAC, 0x02, 0x20,	// LDY $2002
			0xA2, 0x08, 0x00,	// LDX #$0008
			0xB4, 0x02,		// LDY $02, X
			0xBC, 0x02, 0x20,	// LDY $2002, X
			0xE2, 0x10,		// SEP #$10	; long A, short X
			0xA0, 0x33,		// LDY #$8833
			0xA4, 0x02,		// LDY $02
			0xAC, 0x02, 0x20,	// LDY $2002
			0xA2, 0x08,		// LDX #$08
			0xB4, 0x02,		// LDY $02, X
			0xBC, 0x02, 0x20,	// LDY $2002, X
			0xEA,			// NOP
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA2, 0xFF, 0xFF,	// LDX #$FFFF
			0xB4, 0x02,		// LDY $01, X   - expect 1
			0xBC, 0x00, 0x00,	// LDY $0001, X
		}},
	}

	loadCode(p, program)
	p.CPU.PC = 0x1100
}

func test_tcd(p *Platform) {
	program := []memoryData{
		{0x001000, []byte{
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA9, 0x33, 0x88,	// LDA #$8833
			0x5B,			// TCD
			0x1B,			// TCS
			0xE2, 0x30,		// SEP #$30	; short A, short X
			0xA9, 0x22,		// LDA #$22
			0x5B,			// TCD
			0xEB,			// XBA
			0x1B,			// TCS
			0xEA,			// NOP
			0xA9, 0x00,		// LDA #$00
			0xEB,			// XBA
			0xA9, 0x00,		// LDA #$00
			0x7B,			// TDC
			0x3B,			// TCS
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA9, 0x00, 0x00,	// LDA #$0000
			0x7B,			// TDC
			0x3B,			// TCS
		}},
	}

	loadCode(p, program)
}

func test_xce(p *Platform) {
	program := []memoryData{
		{0x001000, []byte{
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA9, 0x33, 0x88,	// LDA #$2233
			0xAA,			// TAX
			0x9A,			// TXS
			0x38,			// SEC
			0xFB,			// XCE
			0x18,			// CLC
			0xFB,			// XCE
			0xC2, 0x30,		// REP #$30	; long A, long X
		}},
	}

	loadCode(p, program)
}

func test_xba(p *Platform) {
	program := []memoryData{
		{0x001000, []byte{
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA9, 0x33, 0x88,	// LDA #$2233
			0xEB,			// XBA

			0xE2, 0x20,		// SEP #$20	; short A
			0xEB,			// XBA
		}},
	}

	loadCode(p, program)
}

func test_tay(p *Platform) {
	program := []memoryData{
		{0x001000, []byte{
			0xC2, 0x30,		// REP #$30	; long A, long X
			0xA9, 0x33, 0x88,	// LDA #$8833
			0xC2, 0x80,		// REP #$80
			0xA8,			// TAY
			0xA9, 0x22, 0x99,	// LDA #$9922
			0xE2, 0x20,		// SEP #$20	; short A
			0xA8,			// TAY
			0xEA,			// NOP

			0xC2, 0x20,		// REP #$20	; long A
			0xE2, 0x10,		// SEP #$10	; short X
			0xA9, 0x33, 0x88,	// LDA #$8833
			0xA8,			// TAY
			0xEA,			// NOP

			0xE2, 0x30,		// SEP #$10	; short A, short X
			0xA9, 0x11,		// LDA #$11
			0xA8,			// TAY
			0xEA,			// NOP

			0xE2, 0x20,		// SEP #$20	; short A
			0xC2, 0x10,		// REP #$10	; long X
			0xA9, 0x66,		// LDA #$66
			0xA8,			// TAY
			0xEA,			// NOP
		}},
	}

	loadCode(p, program)
}


func test_phx_plx(p *Platform) {
	program := []memoryData{
		{0x001000, []byte{
			0xE2, 0x20,		// SEP #$20	; short A
			0x8B,			// PHB
			0x0B,			// PHD
			0x4B,			// PHK
			0x08,			// PHP
			0xA9, 0x81,		// LDA #$81
			0x28,			// PLP
			0x2B,			// PLD
			0xAB,			// PLB
			0x68,                   // PLA
			0xA9, 0x81,		// LDA #$82
			0x48,			// PHA
			0x48,			// PHA
			0x48,			// PHA
			0xAB,			// PLB
			0x2B,			// PLD
			0xC2, 0x20,		// SEP #$20	; long A
			0xA9, 0x33, 0x77,	// LDA #$7733
			0x48,			// PHA
			0x2B,			// PLD
			0xA9, 0x33, 0x77,	// LDA #$7733
			0x48,			// PHA
			0x48,			// PHA
			0x48,			// PHA
			0x48,			// PHA
			0xE2, 0x10,		// SEP #$10	; short X
			0xFA,			// PHX
			0xFA,			// PHX
			0x7A,			// PHY
			0x7A,			// PHY
			0xC2, 0x10,		// SEP #$20	; long X
			0xFA,			// PHX
			0x7A,			// PHY

		}},
	}

	loadCode(p, program)
}

func test_long_short(p *Platform) {
	program := []memoryData{
		{0x001000, []byte{
			0xC2, 0x20,		// REP #$20	; long A
			0xA9, 0x33, 0x44,       // LDA #$4433
			0xE2, 0x20,		// SEP #$20	; short A
			0xA9, 0x55,		// LDA #$55
			0xC2, 0x20,		// REP #$20	; long A

			0xC2, 0x10,		// REP #$10	; long X
			0xA2, 0x33, 0x44,       // LDX #$4433
			0xA0, 0x55, 0x66,       // LDY #$6655
			0xC2, 0x10,		// REP #$10	; long X - no-op
			0xE2, 0x10,		// SEP #$10	; short X
			0xA2, 0x77,		// LDX #$77
			0xA0, 0x88,		// LDY #$88
			0xC2, 0x10,		// REP #$10	; long X
		}},
	}

	loadCode(p, program)
}

func test_inx(p *Platform) {
	program := []memoryData{
		{0x001000, []byte{
			0xC2, 0x10,		// REP #$10	; long X
			0xA2, 0x00, 0x00,       // LDX #$0000
			0xE8,                   // INX
			0xE8,			// INX
			0xCA,			// DEX
			0xCA,			// DEX
			0xCA,			// DEX
			0xC2, 0x10,		// REP #$10	; long X - no-op
			0xE2, 0x10,		// SEP #$10	; short X
			0xE8,                   // INX
			0xE8,                   // INX
			0xE8,			// INX
			0xCA,			// DEX
			0xCA,			// DEX
			0xCA,			// DEX
			0xE2, 0x10,		// SEP #$10	; short X - no-op
			0xC2, 0x10,		// REP #$10	; long X - no-op
			0xE8,			// INX
		}},
	}

	loadCode(p, program)
}

func test_iny(p *Platform) {
	program := []memoryData{
		{0x001000, []byte{
			0xC2, 0x10,		// REP #$10	; long X
			0xA0, 0x00, 0x00,       // LDY #$0000
			0xC8,                   // INY
			0xC8,			// INY
			0x88,			// DEY
			0x88,			// DEY
			0x88,			// DEY
			0xC2, 0x10,		// REP #$10	; long X - no-op
			0xE2, 0x10,		// SEP #$10	; short X
			0xC8,                   // INY
			0xC8,                   // INY
			0xC8,			// INY
			0x88,			// DEY
			0x88,			// DEY
			0x88,			// DEY
			0xE2, 0x10,		// SEP #$10	; short X - no-op
			0xC2, 0x10,		// REP #$10	; long X - no-op
			0xC8,			// INY
		}},
	}

	loadCode(p, program)
}

*/

/*
func main() {
	fmt.Printf("here\n")
	test_lda()
	fmt.Printf("are\n")
}
*/

